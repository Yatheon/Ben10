#include "NXCDefs.h"
#define NEAR 15 //cm
 
#define custom_turn(s,d,t)\
  RotateMotor(OUT_C, s, d);RotateMotor(OUT_A, s,d):Wait(t);

#define half_turn \
 OnRev(OUT_C, 50);OnRev(OUT_A, 50);Wait(700);

  #define __NOTETIME   10
#define __WAITTIME   12
 



/*
task sensor_action()
{

SetSensorLowspeed(IN_4);

while(true){
   //OnFwd(OUT_AC,50);

   while(SensorUS(IN_4)>NEAR);
    Off(OUT_AC);
   // RotateMotor(OUT_B, 100, 30);
    //Wait(HATCH_DOWN);
    OnFwdReg(OUT_C, 100, OUT_REGMODE_SYNC);
    OnRevReg(OUT_A, 100, OUT_REGMODE_SYNC);
    //Wait(TURN_RIGHT);
    Off(OUT_AC);
    Off(OUT_B);
    //PlayFileEx("dead.rso", 4, FALSE);
    Wait(10000);
 }
 */
 
 inline void turn_left()
{
 RotateMotor(OUT_A, 100, -360);

}

 inline void turn_right()
{
 RotateMotor(OUT_C, 100, -360);
}


mutex moveMutex;

 task move_fwd()
{
 OnFwdReg(OUT_AC, 75, OUT_REGMODE_SYNC);
 
 while(SensorUS(IN_4)>NEAR)
 {
      turn_right();
      Wait(2000);
      turn_left();
 }
}

task hitta()
{

int s=SensorUS(IN_4);


 while(s>20)
 {
   RotateMotor(OUT_C, 50, -30);

  s=SensorUS(IN_4);

 }
 
 int v=SensorUS(IN_4);
 RotateMotor(OUT_C, 50, -30);
 int h=SensorUS(IN_4);
 
 while(v>h==true)
  {
  RotateMotor(OUT_C, 50, -15);
   v = h;
   h = SensorUS(IN_4);

  }



}

task avl()
{

 RotateMotor(OUT_B, 20, -90);

  PlayTone(349,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(349,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(349,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(349,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(349,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(349,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(349,4*__NOTETIME);
  Wait(4*__WAITTIME);
  
  OnRevReg(OUT_AC, 50, OUT_REGMODE_SYNC);
  Wait(1000);
  Off(OUT_AC);
  RotateMotor(OUT_B, 20, 90);

}

inline int paket1()   // Höger 2.5m
{

      //Precedes(move_fwd, check_sensors);

}

task paket2()   // Vänser 2.5m
{
      //hitta();
}

task paket3()    // Höger 2.5m tvärs över väggen
{
     // hitta();
}

task paket4()   // Vänster 2.5m tvärs över väggen
{
     // hitta();
}

task main()
{
SetSensorLowspeed(IN_4);


   Precedes(avl);
   

}

