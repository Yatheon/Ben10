#include "NXCDefs.h"
 /*
inline int Choice()
{
int p_choice;



return p_choice;
} */


inline void turnR(int speed)//Turns right
{
  	OnFwd(OUT_A, speed);
		OnRev(OUT_C, speed);
}

inline void turnL(int speed)//Turns left
{
  	OnFwd(OUT_A, speed);
		OnRev(OUT_C, speed);
}

inline void move_fwd(int distance)
{
 int i;
 OnFwdReg(OUT_AC, 30, OUT_REGMODE_SYNC);
 i = SensorUS(IN_4);  #define __NOTETIME   10
#define __WAITTIME   12

  PlayTone(294,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(294,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(440,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(440,4*__NOTETIME);
  Wait(4*__WAITTIME);
  PlayTone(247,4*__NOTETIME);
  Wait(4*__WAITTIME);
              NumOut(10, LCD_LINE1, i);
 	while(i>distance) //Runs untill robot is within distance
 	{

 		i = SensorUS(IN_4);
 	}
 Off(OUT_AC);
Wait(1000);
  NumOut(10, LCD_LINE2, i);

}

inline void drop()//Book dropoff
{
       RotateMotor(OUT_B, 20, -150);
       Wait(1000);

       OnRevReg(OUT_AC, 50, OUT_REGMODE_SYNC);
       Wait(500);
       Off(OUT_AC);

       RotateMotor(OUT_B, 20, 150);
}

inline void Find() //Finds the wall and lines up the robot
{
 	int range,right,left;
	range=SensorUS(IN_4);


	while(range>70)//Until wall is found
	{
    turnR(40);
    Wait(100);
	  Off(OUT_AC);
		range=SensorUS(IN_4);
	}
	Off(OUT_AC);

	left=SensorUS(IN_4); // Sets first point to compare

	turnR(50);
	Wait(200);
	Off(OUT_AC);

	right=SensorUS(IN_4); // Sets second point to compare

	while(left>right&&left!=right)// Runs untill right compare point is bigger than left
	{
		turnR(50);
		Wait(200);
		Off(OUT_AC);
		left = right;
		right = SensorUS(IN_4);
	}

// Turns one step back so it is lined up with wall
turnL(50);
Wait(400);
Off(OUT_AC);

}

inline void Packet_1()   // Right 2.5m
{
	RotateMotor(OUT_A, 75, 360); //Turns the robot right 90Degrees
	Off(OUT_A);
	Wait(1000);// To ensure the robot is not interrupted by next task


	OnFwdReg(OUT_AC, 75, OUT_REGMODE_SYNC);//Runs the robot 2.5m in a line
	Wait(6000);
  Off(OUT_AC);

  Find();

	move_fwd(20);

	drop();
}


task main()
{
	SetSensorLowspeed(IN_4);

  //int p_choice = Choice();

 	Find();  // Finds the wall
 	move_fwd(30);
  Packet_1();

 /*
 switch(Choice)
    {
        case 1 :
        Packet_1();
        Break;

        case 2 :
        Packet_2();
        Break;

        case 3 :
        Packet_3();
        Break;

        case 4 :
        Packet_4();
        Break;
      }
     */

}
